/* tslint:disable:max-line-length */
import { TestBed, inject } from '@angular/core/testing';

import { GeneratorService } from './../services/generator.service';

import {
  createKnownValuesObject,
  solveForUnknownVariable,
  simplifyEquation,
  toArray,
  generatePermutations,
  meetsUnknownVariableSpecification,
  // containsImaginary,
  calculateDecimalPlaces,
  pullRandomValue,
  genRandomPermutation,
  getRangeValues,
  isVariableInArray,
  getRandomValue,
  getCollisionRisk,
  getVariablesValuesCount,
  getVariableValuesCount
} from './utilities';
import * as _ from 'lodash';
import { Variable } from '../variable';
import { randomBytes } from 'crypto';
import { checkAndUpdateBinding } from '@angular/core/src/view/util';

describe('All Utilities methods', () => {
  const varObjA = new Variable('a', 0, _.random(0, 5, false), _.random(15, 20, false));
  const varObjB = new Variable('b', 0, _.random(0, 5, false), _.random(15, 20, false));
  const varObjC = new Variable('c', 0, _.random(0, 5, false), _.random(15, 20, false));
  const varObjX = new Variable('x', 0, _.random(0, 5, false), _.random(15, 20, false));
  const variables: Variable[] = [varObjA, varObjB, varObjC, varObjX];
  const randomSet: number [] = genRandomPermutation(variables);

  const decVarObjH: Variable = new Variable('h', 1, _.random(0, 5.0), _.random(15, 20.0));
  const decVarObjI: Variable = new Variable('i', 1, _.random(0, 5.0), _.random(15, 20.0));
  const decVarObjJ: Variable = new Variable('j', 1, _.random(0, 5.0), _.random(15, 20.0));
  const decVarObjK: Variable = new Variable('k', 1, _.random(0, 5.0), _.random(15, 20.0));
  const decVariables: Variable[] = [decVarObjH, decVarObjI, decVarObjJ, decVarObjK];
  const randomDecSet: number [] = genRandomPermutation(decVariables);

  const knownVarsObj: { [name: string]: string } = createKnownValuesObject(randomSet, variables);
  const equation = 'a*b+c=x';
  const numberOfProblems = 30;

  beforeEach(() => {
    TestBed.configureTestingModule({
    });
  });

  describe('createKnownValuesObject for a random set', () => {
    it('should take a random set generated by genRandomPermutations and return a variable object.', () => {
      expect(knownVarsObj).toEqual({[varObjA.name]: String(randomSet[0]), [varObjB.name]: String(randomSet[1]), [varObjC.name]: String(randomSet[2])});
    });

    describe('solveForUnknownVariable ', () => {
      it('should take a set of numbers, plug them into the simplified equation and return a number for the variable thats being solved for)', () => {
        const simplifiedEquation = simplifyEquation(equation, 'x');
        const solvedForUnknownVariable = solveForUnknownVariable(randomSet, simplifiedEquation, variables);

        expect(solvedForUnknownVariable).toEqual(randomSet[0] * randomSet[1] + randomSet[2]);
    });

    describe('simplifyEquation', () => {
      it('should return the equation in terms of variable being solved for', () => {
        const simplifiedEquation = simplifyEquation(equation, 'b');
        expect(simplifiedEquation).toEqual('[-(-x+c)*a^(-1)]');
      });
    });

    describe('calculateDecimalPlaces', () => {
      it('checks the value returned by calculateDecimalPlaces when a string is given as parameter', () => {
        const stringAsParameter: string = '4.49854';
        const calculatedDecimal: number = calculateDecimalPlaces(stringAsParameter);
        expect(calculatedDecimal).toBe(5);
      });
      it('checks the value returned by calculateDecimalPlaces when a string is given as parameter', () => {
        const numberAsParameter: number = 4.49854;
        const calculatedDecimal: number = calculateDecimalPlaces(numberAsParameter);
        expect(calculatedDecimal).toBe(5);
      });
    });

    describe('getRangeValues for input with 0 decimals', () => {
      it('should check getRangeValues when Variable contains 0 decimals', () => {
        const newVariable: Variable = new Variable( 'n', 0, 1, 5);
        expect(getRangeValues(newVariable)).toEqual([1, 2, 3, 4, 5]);
      });
      it('should check getRangeValues when Variables contains > 0 decimals', () =>  {
        const newVariable: Variable = new Variable('q', 1, 1, 2);
        expect(getRangeValues(newVariable)).toEqual([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0]);
      });
    });

    describe('generatePermutations', () => {
      describe('Cases where parameters contain no decimals', () => {
        const firstVariable: Variable = new Variable('p', 0, 1, 2);
        const secondVariable: Variable = new Variable('z', 0, 3, 5);
        const thirdVariable: Variable = new Variable('d', 0, 1, 2);
        const variablesTestSet: Variable [] = [firstVariable, secondVariable, thirdVariable];
        const generatedSet: [number []] = generatePermutations(variablesTestSet);

        it('should generate permutations for cases where variables contain no decimals', () => {
          expect(generatedSet).toEqual([[1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5]]);
        });

        it('should check that generatePermutations returns [[]]', () => {
          expect(generatedSet).toEqual(jasmine.any(Array));
          expect(generatedSet[0]).toEqual(jasmine.any(Array));
        });
      });

      describe('cases where parameters contain decimals', () => {
        it('should test for cases where variables contain > 0 decimals', () => {

        });
      });

      describe('isVariableInArray method', () => {

        describe('isVariableInArray for arrays of integer values', () => {
          it('should check isVariableInArray when variable is not in array', () => {
            const checkVariableIsInArray = isVariableInArray([3, 4, 5], [[3, 5, 6], [2, 3, 4]]);
            expect(checkVariableIsInArray).toEqual(false);
          });
          it('should check isVariableInArray when variable is in array', () => {
            const checkVariableIsInArray = isVariableInArray([3, 4, 5], [[3, 4, 5], [2, 3, 4]]);
            expect(checkVariableIsInArray).toBe(true);
          });
        });

        describe('isVariableInArray for arrays of decimal values', () => {
          it('isVariableInArray for cases when variable is not in the array', () => {
            const checkVariableIsInArray = isVariableInArray([3.4, 4.2, 5.9], [[3.4, 5.8, 6.8], [2.4, 3.6, 4.9]]);
            expect(checkVariableIsInArray).toEqual(false);
          });
          it('should check isVariableInArray for cases when variable is in the array', () => {
            const checkVariableIsInArray = isVariableInArray([3.4, 4.2, 5.9], [[3.4, 5.8, 6.8], [3.4, 4.2, 5.9]]);
            expect(checkVariableIsInArray).toBe(true);
          });
        });
      });

      describe('getRandomValue', () => {
        it('should verify that getRandomValue lies between min and max for non-decimal variables', () => {
          const randomValue = getRandomValue(varObjA);
          expect(randomValue).toBeGreaterThanOrEqual(varObjA.min);
          expect(randomValue).not.toBeGreaterThan(varObjA.max);
        });

        it('should verify that getRandomValue lies between min and max for non-decimal variables', () => {
          const randomValue = getRandomValue(decVarObjH);
          expect(randomValue).toBeGreaterThanOrEqual(decVarObjH.min);
          expect(randomValue).not.toBeGreaterThan(decVarObjH.max);
        });
      });

      describe('genRandomPermutation', () => {
        it('should verify that Non-decimal permutations generated by getRandomValue are within min and max values', () => {
          const randomPermutation = genRandomPermutation(variables);
          expect(randomPermutation[0]).toBeGreaterThanOrEqual(varObjA.min);
          expect(randomPermutation[0]).toBeLessThanOrEqual(varObjA.max);
          expect(randomPermutation[1]).toBeGreaterThanOrEqual(varObjB.min);
          expect(randomPermutation[1]).toBeLessThanOrEqual(varObjB.max);
          expect(randomPermutation[2]).toBeGreaterThanOrEqual(varObjC.min);
          expect(randomPermutation[2]).toBeLessThanOrEqual(varObjC.max);
        });

        it('should verify that Decimal permutations generated by getRandomValue are within min and max values', () => {
          const randomPermutation = genRandomPermutation(decVariables);
          expect(randomPermutation[0]).toBeGreaterThanOrEqual(decVarObjH.min);
          expect(randomPermutation[0]).toBeLessThanOrEqual(decVarObjH.max);
          expect(randomPermutation[1]).toBeGreaterThanOrEqual(decVarObjI.min);
          expect(randomPermutation[1]).toBeLessThanOrEqual(decVarObjI.max);
          expect(randomPermutation[2]).toBeGreaterThanOrEqual(decVarObjJ.min);
          expect(randomPermutation[2]).toBeLessThanOrEqual(decVarObjJ.max);
        });
      });


      describe('getCollisionRisk', () => {
        it('should check that collision risk is a decimal value between 0 and 1', () => {
          const collisionRisk = getCollisionRisk(variables, numberOfProblems);
          expect(collisionRisk).toBeLessThanOrEqual(1.0);
          expect(collisionRisk).toBeGreaterThanOrEqual(0.0);
        });

        it('should check that collision risk is a decimal value between 0 and 1 for decimal Variables', () => {
          const collisionRisk = getCollisionRisk(decVariables, numberOfProblems);
          expect(collisionRisk).toBeLessThanOrEqual(1.0);
          expect(collisionRisk).toBeGreaterThanOrEqual(0.0);
        });
      });

      describe('getVariablesValuesCount', () => {
        const intVarValuesCount = getVariablesValuesCount(variables);
        const varCountA = getVariableValuesCount(varObjA);
        const varCountB = getVariableValuesCount(varObjB);
        const varCountC = getVariableValuesCount(varObjC);
        const varCountX = getVariableValuesCount(varObjX);

        const decVarValuesCount = getVariablesValuesCount(decVariables);
        const varCountH = getVariableValuesCount(decVarObjH);
        const varCountI = getVariableValuesCount(decVarObjI);
        const varCountJ = getVariableValuesCount(decVarObjJ);
        const varCountK = getVariableValuesCount(decVarObjK);


        describe('getVariablesValuesCount for Non-decimal cases', () => {
          it('should check Non-decimal cases and return an integer count of number of variables', () => {
            expect(intVarValuesCount).toEqual(varCountA * varCountB * varCountC * varCountX);
          });

          it('getVariablesValuesCount should check Decimal cases and return an integer count of number of variables', () => {
            expect(decVarValuesCount).toEqual(varCountH * varCountI * varCountJ  * varCountK);
          });
        });

        describe('getVariableValuesCount', () => {
          it('should check non-decimal Variables cases', () => {
            expect(varCountA).toEqual(varObjA.max - varObjA.min + 1);
            expect(varCountB).toEqual(varObjB.max - varObjB.min + 1);
            expect(varCountC).toEqual(varObjC.max - varObjC.min + 1);
            expect(varCountX).toEqual(varObjX.max - varObjX.min + 1);
          });

          it('should check Decimal Variables cases', () => {
            expect(varCountH).toEqual((decVarObjH.max - decVarObjH.min + 1) * 10 ** decVarObjH.decPoint);
            expect(varCountI).toEqual((decVarObjI.max - decVarObjI.min + 1) * 10 ** decVarObjH.decPoint);
            expect(varCountJ).toEqual((decVarObjJ.max - decVarObjJ.min + 1) * 10 ** decVarObjJ.decPoint);
            expect(varCountK).toEqual((decVarObjK.max - decVarObjK.min + 1) * 10 ** decVarObjH.decPoint);
          });
        });
      });

      describe('pullRandomValue', () => {
        const testSet = [ [1, 2], [2, 4], [7, 4], [9, 9] ];
        const refTestSet = testSet.slice();
        const splicedPermutation = pullRandomValue(testSet);

        const decTestSet = [ [1.1, 3.3], [2.4], [4.9] ];
        const decRefTestSet = decTestSet.slice();
        const decSplicedPermutation = pullRandomValue(decTestSet);

        it('should check that a permutation is removed from a set of possible permutations', () => {

          const permutationIncluded = testSet.includes(splicedPermutation);
          expect(permutationIncluded).toBe(false);
        });
        it('', () => {
          const randomValIncluded = refTestSet.includes(splicedPermutation)
          expect(randomValIncluded).toBe(true);
        });

        it('should check that the random set that is spliced is present in a copy of the original array', () => {
          const permutationIncluded = decTestSet.includes(splicedPermutation);
          expect(permutationIncluded).toBe(false);
        });

        it('should check that the random set that is spliced is present in a copy of the original array', () => {
          const randomValIncluded = decRefTestSet.includes(decSplicedPermutation)
          expect(randomValIncluded).toBe(true);
        });
      });

      describe('meetsUnknownVariableSpecification', () => {

        describe('Non-decimal Cases', () => {
          it('should Verify that a non-decimal value meets parameters of a Variable', () => {
            expect(meetsUnknownVariableSpecification(6, varObjA)).toBe(true);
          });
          it('should Verify that a non-decimal value meets parameters of a Variable', () => {
            expect(meetsUnknownVariableSpecification(21, varObjA)).toBe(false);
          });
        });

        describe('Decimal Cases', () => {
          it('should check if a non-decimal value does not meet parameters of a Variable', () => {
            expect(meetsUnknownVariableSpecification(6.5, decVarObjH)).toBe(true);
          });
          it('should check if a Decimal value does not meet parameters of a Variable', () => {
            expect(meetsUnknownVariableSpecification(26.5, decVarObjH)).toBe(false);
          });
        });
      });
    });
  });















//   describe('The containsImaginary utility method', () => {
//     it('should return false if input contains an "i" for imaginary', () => {
//       const expression: string = 'x + y = z';
//       expect(containsImaginary(expression)).toBe(false);
//     });

//     it('should return true if expression contains "i"', () => {
//       const imaginaryExpression: string = '3i + 4x = z';
//       expect(containsImaginary(imaginaryExpression)).toBe(true);
//     });
//   });
 });
});
