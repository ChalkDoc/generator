/* tslint:disable:max-line-length */
import { TestBed, inject } from '@angular/core/testing';

import { GeneratorService } from './../services/generator.service';

import {
  createKnownValuesObject,
  solveForUnknownVariable,
  simplifyEquation,
  toArray,
  generatePermutations,
  meetsUnknownVariableSpecification,
  containsImaginary,
  calculateDecimalPlaces,
  pullRandomValue,
  genRandomPermutation
} from './utilities';
import * as _ from 'lodash';
import { Variable } from '../variable';

describe('Utilities methods', () => {
  const varObjA = new Variable('a', 0, _.random(0, 5, false), _.random(15, 20, false));
  const varObjB = new Variable('b', 0, _.random(0, 5, false), _.random(15, 20, false));
  const varObjC = new Variable('c', 0, _.random(0, 5, false), _.random(15, 20, false));
  const varObjX = new Variable('x', 0, _.random(0, 5, false), _.random(15, 20, false));
  const variables: Variable[] = [varObjA, varObjB, varObjC, varObjX];


  beforeEach(() => {
    TestBed.configureTestingModule({ 
    });
  });

  describe('createKnownValuesObject for a random set', () => {
    it('should take a random set generated by genRandomPermutations and return a variable object.', () => {
      const randomSet: number [] = genRandomPermutation(variables);
      const knownVarsObj: { [name: string]: string } = createKnownValuesObject(randomSet, variables);
      expect(knownVarsObj).toEqual({[varObjA.name]: String(randomSet[0]), [varObjB.name]: String(randomSet[1]), [varObjC.name]: String(randomSet[2])});
    })
  })
























  describe('The containsImaginary utility method', () => {
    it('should return false if input contains an "i" for imaginary', () => {
      const expression: string = 'x + y = z';
      expect(containsImaginary(expression)).toBe(false);
    });
  
    it('should return true if expression contains "i"', () => {
      const imaginaryExpression: string = '3i + 4x = z';
      expect(containsImaginary(imaginaryExpression)).toBe(true);
    });
  });
});